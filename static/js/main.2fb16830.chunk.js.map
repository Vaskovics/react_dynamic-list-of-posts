{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","types/ErrorType.ts","components/NewCommentForm.tsx","utils/helperFunctions.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","onSelectPost","selectedPost","handleClosePost","length","className","map","post","id","title","type","onClick","handleOpenPost","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","ErrorType","client","getIntialCommentState","postId","name","email","NewCommentForm","updatePostComments","updateErrorStatus","useState","newComment","setNewComment","isLoading","setIsLoading","isName","setIsName","isEmail","setIsEmail","isBody","setIsBody","handleInputChange","event","target","value","currentComment","addNewComment","a","fetchComment","currentComments","general","onSubmit","isNotValid","preventDefault","htmlFor","placeholder","classNames","onChange","PostDetails","postComments","setPostComments","isWriteComment","setIsWriteComment","none","typeOfError","setTypeOfError","useEffect","commentsFromServer","catch","finally","handleDeletePostBtn","filter","postComment","error","href","UserSelector","listOfUserf","saveSelectedUser","choosenUser","isActive","setIsActive","role","user","idx","App","listOfUsers","setListOfUsers","listsOfPosts","setListsOfPosts","selectedUser","setSelectedUser","setSelectedPost","usersApi","userID","postsFromSever","noPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2fb16830.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype ListOfPosts = {\n  posts: Post[],\n  onSelectPost: (post: Post | null) => void,\n  selectedPost: Post | null,\n};\n\nexport const PostsList: React.FC<ListOfPosts> = ({\n  posts,\n  onSelectPost,\n  selectedPost,\n}) => {\n  const handleOpenPost = (post: Post) => {\n    onSelectPost(post);\n  };\n\n  const handleClosePost = () => {\n    onSelectPost(null);\n  };\n\n  return (\n    <>\n      {posts.length > 0 && (\n        <div data-cy=\"PostsList\">\n          <p className=\"title\">Posts:</p>\n\n          <table\n            className=\"table is-fullwidth is-striped is-hoverable is-narrow\"\n          >\n            <thead>\n              <tr className=\"has-background-link-light\">\n                <th>#</th>\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {posts.map(post => (\n                <tr data-cy=\"Post\" key={post.id}>\n                  <td data-cy=\"PostId\">{post.id}</td>\n\n                  <td data-cy=\"PostTitle\">\n                    {post.title}\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    {selectedPost?.id === post.id ? (\n                      <button\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className=\"button is-link\"\n                        onClick={handleClosePost}\n                      >\n                        Close\n                      </button>\n                    ) : (\n                      <button\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className=\"button is-link is-light\"\n                        onClick={() => handleOpenPost(post)}\n                      >\n                        Open\n                      </button>\n                    )}\n                  </td>\n                </tr>\n              ))}\n\n            </tbody>\n          </table>\n        </div>\n      )}\n    </>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorType {\n  none = '',\n  general = 'Something went wrong!',\n  noPosts = 'No posts yet',\n}\n","/* eslint-disable react/button-has-type */\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { postNewComment } from '../utils/helperFunctions';\nimport { Comment } from '../types/Comment';\nimport { ErrorType } from '../types/ErrorType';\n\ntype Props = {\n  postId: number,\n  updatePostComments: React.Dispatch<React.SetStateAction<Comment[]>>\n  updateErrorStatus: (error: ErrorType) => void,\n};\n\nconst getIntialCommentState = (postId: number) => ({\n  name: '',\n  email: '',\n  body: '',\n  postId,\n});\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  updatePostComments,\n  updateErrorStatus,\n}) => {\n  const [newComment, setNewComment] = useState(getIntialCommentState(postId));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isName, setIsName] = useState(true);\n  const [isEmail, setIsEmail] = useState(true);\n  const [isBody, setIsBody] = useState(true);\n\n  const handleInputChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    if (name === 'name' && !isName) {\n      setIsName(true);\n    }\n\n    if (name === 'email' && !isEmail) {\n      setIsEmail(true);\n    }\n\n    if (name === 'body' && !isBody) {\n      setIsBody(true);\n    }\n\n    setNewComment(currentComment => ({\n      ...currentComment,\n      [name]: value,\n    }));\n  };\n\n  const addNewComment = async () => {\n    try {\n      setIsLoading(true);\n      const fetchComment = await postNewComment(newComment);\n\n      updatePostComments(currentComments => [...currentComments, fetchComment]);\n    } catch {\n      updateErrorStatus(ErrorType.general);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmitComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    let isNotValid;\n\n    if (!newComment.name) {\n      setIsName(false);\n      isNotValid = true;\n    }\n\n    if (!newComment.email) {\n      setIsEmail(false);\n      isNotValid = true;\n    }\n\n    if (!newComment.body) {\n      setIsBody(false);\n      isNotValid = true;\n    }\n\n    if (isNotValid) {\n      return;\n    }\n\n    addNewComment();\n\n    setNewComment(getIntialCommentState(postId));\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmitComment}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': !isName,\n              },\n            )}\n            onChange={handleInputChange}\n            value={newComment.name}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!isName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!isName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': !isEmail,\n              },\n            )}\n            value={newComment.email}\n            onChange={handleInputChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {!isEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!isEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              {\n                'is-danger': !isBody,\n              },\n            )}\n            value={newComment.body}\n            onChange={handleInputChange}\n          />\n        </div>\n\n        {!isBody && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              {\n                'is-loading': isLoading,\n              },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from './fetchClient';\n\nexport const getUsersFromServer = () => client.get<User[]>('/users');\nexport const getPostsFromServer = (userID: number) => client.get<Post[]>(`/posts?userId=${userID}`);\n\nexport const getCommentsFromServer = (postId: number) => (\n  client.get<Comment[]>(`/comments?postId=${postId}`)\n);\n\nexport const deleteCommentFromServer = (commentId: number) => (\n  client.delete(`/comments/${commentId}`)\n);\n\nexport const postNewComment = (comment: CommentData) => (\n  client.post<Comment>('/comments', comment)\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport {\n  deleteCommentFromServer,\n  getCommentsFromServer,\n} from '../utils/helperFunctions';\nimport { Comment } from '../types/Comment';\nimport { ErrorType } from '../types/ErrorType';\n\ntype Props = {\n  selectedPost: Post | null,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n}) => {\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isWriteComment, setIsWriteComment] = useState(false);\n  const [typeOfError, setTypeOfError] = useState<ErrorType>(ErrorType.none);\n\n  useEffect(() => {\n    setTypeOfError(ErrorType.none);\n    if (selectedPost) {\n      setIsLoading(true);\n      getCommentsFromServer(selectedPost.id)\n        .then(commentsFromServer => {\n          setPostComments(commentsFromServer);\n        })\n        .catch(() => {\n          setPostComments([]);\n          setTypeOfError(ErrorType.general);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n\n    return () => {\n      setIsWriteComment(false);\n    };\n  }, [selectedPost]);\n\n  if (!selectedPost) {\n    return <div>No post selected</div>;\n  }\n\n  const handleDeletePostBtn = async (postId: number) => {\n    try {\n      deleteCommentFromServer(postId);\n      setPostComments(postComments.filter(postComment => (\n        postComment.id !== postId\n      )));\n    } catch (error) {\n      setTypeOfError(ErrorType.general);\n    }\n  };\n\n  const handleWriteComments = () => {\n    setIsWriteComment(true);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {selectedPost.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n\n          {typeOfError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!postComments.length && !typeOfError && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) }\n\n          {postComments.length ? (\n            <p className=\"title is-4\">Comments:</p>\n          ) : (\n            ''\n          )}\n\n          {isLoading && <Loader />}\n          {postComments.map(postComment => (\n            <article className=\"message is-small\" data-cy=\"Comment\">\n              <div className=\"message-header\">\n                <a\n                  href={`mailto:${postComment.email}`}\n                  data-cy=\"CommentAuthor\"\n                >\n                  {postComment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => handleDeletePostBtn(postComment.id)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {postComment.body}\n              </div>\n            </article>\n          ))}\n\n          {!isWriteComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleWriteComments}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isWriteComment && (\n          <NewCommentForm\n            postId={selectedPost.id}\n            updatePostComments={setPostComments}\n            updateErrorStatus={setTypeOfError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype SelectorUsers = {\n  listOfUserf: User[],\n  saveSelectedUser: (user: User) => void,\n  choosenUser: User | null,\n};\n\nexport const UserSelector: React.FC<SelectorUsers> = ({\n  listOfUserf,\n  saveSelectedUser,\n  choosenUser,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isActive })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(!isActive)}\n        >\n          {choosenUser?.name\n            ? (\n              <p>{choosenUser.name}</p>\n            ) : (\n              <span>Choose a user</span>\n            )}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        {true && (\n          <div className=\"dropdown-content\">\n            {listOfUserf.map((user, idx) => (\n              <a\n                href={`#user=${idx + 1}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': user.id === choosenUser?.id },\n                )}\n                key={user.id}\n                onClick={() => {\n                  saveSelectedUser(user);\n                  setIsActive(false);\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { ErrorType } from './types/ErrorType';\nimport {\n  getPostsFromServer,\n  getUsersFromServer,\n} from './utils/helperFunctions';\n\nexport const App: React.FC = () => {\n  const [listOfUsers, setListOfUsers] = useState<User[]>([]);\n  const [listsOfPosts, setListsOfPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [typeOfError, setTypeOfError] = useState<ErrorType>(ErrorType.none);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const saveSelectedUser = (user: User) => setSelectedUser(user);\n\n  useEffect(() => {\n    getUsersFromServer()\n      .then(usersApi => {\n        setListOfUsers(usersApi);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoading(true);\n      setTypeOfError(ErrorType.none);\n\n      getPostsFromServer(selectedUser.id)\n        .then(postsFromSever => {\n          setListsOfPosts(postsFromSever);\n          if (!postsFromSever.length) {\n            setTypeOfError(ErrorType.noPosts);\n          }\n        })\n        .finally(() => {\n          setIsLoading(false);\n          setSelectedPost(null);\n        });\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  listOfUserf={listOfUsers}\n                  saveSelectedUser={saveSelectedUser}\n                  choosenUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUser ? null : (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {typeOfError && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {selectedUser && (\n                  <PostsList\n                    posts={listsOfPosts}\n                    onSelectPost={setSelectedPost}\n                    selectedPost={selectedPost}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          {selectedPost && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}